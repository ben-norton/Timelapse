using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using Timelapse.Controls;
using Timelapse.Database;
using Timelapse.Enums;
using Timelapse.Util;

namespace Timelapse.Dialog
{
    public partial class DateTimeRereadFromFiles : Window
    {
        private readonly FileDatabase Database;

        // Tokens to let us cancel the Reread Task
        private readonly CancellationTokenSource TokenSource;
        private CancellationToken Token;

        public DateTimeRereadFromFiles(Window owner, FileDatabase database)
        {
            this.InitializeComponent();
            this.Database = database;
            this.Owner = owner;

            // Initialize the cancellation token
            this.TokenSource = new CancellationTokenSource();
            this.Token = this.TokenSource.Token;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            Dialogs.TryPositionAndFitDialogIntoWindow(this);
        }

        // Label and size the datagrid column headers
        private void DatagridFeedback_AutoGeneratedColumns(object sender, EventArgs e)
        {
            this.FeedbackGrid.Columns[0].Header = "File name (only for files whose date differs)";
            this.FeedbackGrid.Columns[0].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            this.FeedbackGrid.Columns[1].Header = "Old date  \x2192  New Date if it differs";
            this.FeedbackGrid.Columns[1].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
        }

        #region Reread task
        private async void StartDoneButton_Click(object sender, RoutedEventArgs e)
        {
            
            // Set up a progress handler that will update the progress bar
            Progress<ProgressBarArguments> progressHandler = new Progress<ProgressBarArguments>(value =>
            {
                // Update the progress bar
                this.UpdateProgressBar(value.PercentDone, value.Message, value.CancelEnabled);
            });
            IProgress<ProgressBarArguments> progress = progressHandler as IProgress<ProgressBarArguments>;

            // This list will hold key / value pairs that will be bound to the datagrid feedback, 
            // which is the way to make those pairs appear in the data grid during background worker progress updates
            ObservableCollection<DateTimeRereadFeedbackTuple> feedbackRows = new ObservableCollection<DateTimeRereadFeedbackTuple>();

            // Configure the UI's initial state
            this.CancelButton.IsEnabled = false;
            this.StartDoneButton.Content = "_Done";
            this.StartDoneButton.Click -= this.StartDoneButton_Click;
            this.StartDoneButton.Click += this.DoneButton_Click;
            this.StartDoneButton.IsEnabled = false;
            this.BusyIndicator.IsBusy = true;

            // Reread the Date/Times from each file
            await Task.Run(() =>
            {
                // Pass 1. For each file, check to see what dates/times need updating.
                progress.Report(new ProgressBarArguments(0, "Pass 1: Examining image and video dates..."));
                int count = this.Database.CurrentlySelectedFileCount;
                TimeZoneInfo imageSetTimeZone = this.Database.ImageSet.GetSystemTimeZone();
               
                // Get the list of image rows (files) whose dates have changed
                List<ImageRow> filesToAdjust = GetImageRowsWithChangedDates(progress, count, imageSetTimeZone, feedbackRows, out int missingFiles);

                // We are done if the operation has been cancelled, or there are no files with changed dates.
                if (CheckIfAllDone(filesToAdjust, feedbackRows, missingFiles))
                {
                    return;
                }

                // Pass 2. Update files in the database
                // Provide feedback that we are in the second pass, disabling the Cancel button in the progress bar as we shouldn't cancel half-way through a database update.
                string message = String.Format("Pass 2: Updating {0} files. Please wait...", filesToAdjust.Count);
                progress.Report(new ProgressBarArguments(0, message, false));
                Thread.Sleep(Constant.ThrottleValues.RenderingBackoffTime);  // Allow the UI to update.

                //// Update the database
                this.DatabaseUpdateFileDates(filesToAdjust);

                // Provide summary feedback 
                message = string.Format("Updated {0}/{1} files whose dates have changed.", filesToAdjust.Count, count);
                feedbackRows.Insert(0, (new DateTimeRereadFeedbackTuple("---", message)));
                if (missingFiles > 0)
                {
                    message = (missingFiles == 1)
                    ? String.Format("{0} file is missing, and was not examined.", missingFiles)
                    : String.Format("{0} files are missing, and were not examined.", missingFiles);
                }
                feedbackRows.Insert(1, (new DateTimeRereadFeedbackTuple("---", message)));

            }, Token).ConfigureAwait(continueOnCapturedContext: true); // Set to true as we need to continue in the UI context

            // The await task has completed
            // Hide the busy indicator and update the UI, e.g., to show which files have changed dates
            this.BusyIndicator.IsBusy = false;
            this.FeedbackGrid.Visibility = Visibility.Visible;
            this.FeedbackGrid.ItemsSource = feedbackRows;
            this.StartDoneButton.IsEnabled = true;
        }
        #endregion

        #region Reread task sub-methods
        // Returns:
        // - the list of files whose dates have changed
        // - a collection of feedback information for each file whose dates were changed, each row detailing the file name and how the dates were changed
        // - the number of missing Files, if any
        private List<ImageRow> GetImageRowsWithChangedDates(IProgress<ProgressBarArguments> progress,int count, TimeZoneInfo imageSetTimeZone, ObservableCollection<DateTimeRereadFeedbackTuple> feedbackRows, out int missingFiles)
        {
            List<ImageRow> filesToAdjust = new List<ImageRow>();
            missingFiles = 0;
            for (int fileIndex = 0; fileIndex < count; ++fileIndex)
            {
                // We will store the various times here
                ImageRow file = this.Database.FileTable[fileIndex];
                DateTimeOffset originalDateTime = file.DateTimeIncorporatingOffset;
                string feedbackMessage = string.Empty;

                if (Token.IsCancellationRequested)
                {
                    // A cancel was requested. Clear all pending changes and abort
                    feedbackRows.Clear();
                    break;
                }

                try
                {
                    // Get the image (if its there), get the new dates/times, and add it to the list of images to be updated 
                    // Note that if the image can't be created, we will just to the catch.
                    bool usingMetadataTimestamp = true;
                    if (file.FileExists(this.Database.FolderPath) == false)
                    {
                        // The file does not exist. Generate a feedback message
                        missingFiles++;
                    }
                    else
                    {
                        // Read the date from the file, and check to see if its different from the recorded date
                        DateTimeAdjustmentEnum dateTimeAdjustment = file.TryReadDateTimeOriginalFromMetadata(this.Database.FolderPath, imageSetTimeZone);
                        if (dateTimeAdjustment == DateTimeAdjustmentEnum.MetadataNotUsed)
                        {
                            // We couldn't read the metadata, so get a candidate date/time from the file info instead
                            file.SetDateTimeOffsetFromFileInfo(this.Database.FolderPath);
                            usingMetadataTimestamp = false;
                        }
                        DateTimeOffset rescannedDateTime = file.DateTimeIncorporatingOffset;
                        bool sameDate = (rescannedDateTime.Date == originalDateTime.Date) ? true : false;
                        bool sameTime = (rescannedDateTime.TimeOfDay == originalDateTime.TimeOfDay) ? true : false;
                        bool sameUTCOffset = (rescannedDateTime.Offset == originalDateTime.Offset) ? true : false;

                        if (!(sameDate && sameTime && sameUTCOffset))
                        {
                            // Date has been updated - add it to the queue of files to be processed, and generate a feedback message.
                            filesToAdjust.Add(file);
                            feedbackMessage = "\x2713"; // Checkmark 
                            feedbackMessage += DateTimeHandler.ToDisplayDateTimeString(originalDateTime) + " \x2192 " + DateTimeHandler.ToDisplayDateTimeString(rescannedDateTime);
                            feedbackMessage += usingMetadataTimestamp ? " (read from metadata)" : " (read from file)";
                            feedbackRows.Add(new DateTimeRereadFeedbackTuple(file.File, feedbackMessage));
                        }
                    }
                }
                catch (Exception exception)
                {
                    // This shouldn't happen, but just in case. 
                    TraceDebug.PrintMessage(string.Format("Unexpected exception processing '{0}' in DateTimeReread. {1}", file.File, exception.ToString()));
                    feedbackMessage += string.Format("\x2716 skipping: {0}", exception.Message);
                    feedbackRows.Add(new DateTimeRereadFeedbackTuple(file.File, feedbackMessage));
                    break;
                }

                progress.Report(new ProgressBarArguments(Convert.ToInt32(fileIndex / Convert.ToDouble(count) * 100.0), String.Format("Pass 1: Checking dates for {0} / {1} files", fileIndex, count)));

                // Put in a delay every now and then, as otherwise the UI won't update.
                if (fileIndex % Constant.ThrottleValues.SleepForImageRenderInterval == 0)
                {
                    Thread.Sleep(Constant.ThrottleValues.RenderingBackoffTime);
                }
            }
            return filesToAdjust;
        }

        // We are done if the operation has been cancelled, or there are no files with changed dates.
        private bool CheckIfAllDone(List<ImageRow> filesToAdjust, ObservableCollection<DateTimeRereadFeedbackTuple> feedbackRows, int missingFiles)
        {
            string message;
            // Abort (with feedback) if no dates needed changing and no cancellation request is pending
            if (filesToAdjust.Count <= 0 && Token.IsCancellationRequested == false)
            {
                // None of the file dates need updating, so no need to do anything more.
                message = "No files updated as their dates have not changed.";
                feedbackRows.Add(new DateTimeRereadFeedbackTuple("---", message));

                if (missingFiles > 0)
                {
                    message = (missingFiles == 1)
                    ? String.Format("{0} file is missing, and was not examined.", missingFiles)
                    : String.Format("{0} files are missing, and were not examined.", missingFiles);
                }
                feedbackRows.Add(new DateTimeRereadFeedbackTuple("---", message));
                return true;
            }

            // Abort (with feedback) the operation was cancelled
            if (Token.IsCancellationRequested == true)
            {
                feedbackRows.Clear();
                message = "No changes were made";
                feedbackRows.Add(new DateTimeRereadFeedbackTuple("Cancelled", message));
                return true;
            }
            return false;
        }

        // Update dates in the database for the given image rows 
        private void DatabaseUpdateFileDates(List<ImageRow> filesToAdjust)
        {
            // Update the database
            List<ColumnTuplesWithWhere> imagesToUpdate = new List<ColumnTuplesWithWhere>();
            foreach (ImageRow image in filesToAdjust)
            {
                imagesToUpdate.Add(image.GetDateTimeColumnTuples());
            }
            this.Database.UpdateFiles(imagesToUpdate);  // Write the updates to the database
        }
        #endregion

        #region ProgressBar helper
        // Convenience routing to show progress information in the progress bar
        // and to enable or disable its cancel button
        private void UpdateProgressBar(int percent, string message, bool cancelEnabled)
        {
            ProgressBar bar = Utilities.GetVisualChild<ProgressBar>(this.BusyIndicator);
            TextBlock textmessage = Utilities.GetVisualChild<TextBlock>(this.BusyIndicator);
            Button cancelButton = Utilities.GetVisualChild<Button>(this.BusyIndicator);
            if (bar != null)
            {
                bar.Value = percent;
            }
            if (textmessage != null)
            {
                textmessage.Text = message;
            }
            if (cancelButton != null)
            {
                cancelButton.IsEnabled = cancelEnabled;
            }
        }
        #endregion

        #region Other Button callbacks
        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

        private void DoneButton_Click(object sender, RoutedEventArgs e)
        {
            TokenSource.Dispose();
            this.DialogResult = true;
        }

        private void CancelButton_Click_1(object sender, RoutedEventArgs e)
        {
            // Set this so that it will be caught in the above await task
            this.TokenSource.Cancel();
        }
        #endregion
    }
}
