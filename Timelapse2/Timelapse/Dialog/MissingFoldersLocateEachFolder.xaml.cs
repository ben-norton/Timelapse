using Microsoft.WindowsAPICodePack.Dialogs;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Controls;

namespace Timelapse.Dialog
{
    /// <summary>
    /// This dialog is one of several that deals with missing folders, i.e. folders that are not found at their relative paths.
    /// It is given a dictionary of old vs. new folder names, and based on that it displays a table of rows, each showing 
    /// - a folder's name, 
    /// - a relative path to an expected old location of that folder,
    /// - a relative path to a possible new location of that folder
    /// The user can then specify whether 
    /// - return true: the new locations are correct, ()
    /// - return null: they would prefer to update the locations manually (e.g., if they aren't correct) 
    /// - return false: cancel all attempts to find the locaton of missing folders.
    /// </summary>
    public partial class MissingFoldersLocateEachFolder : Window
    {
        private readonly string RootPath;
        private ObservableCollection<Tuple<string, string, string>> missingAndMatchingFolders;
        public MissingFoldersLocateEachFolder(string rootPath, List<string> missingRelativePaths)
        {
            InitializeComponent();
            this.RootPath = rootPath;
            if (missingRelativePaths == null)
            {
                this.DialogResult = null;
                return;
            }
            this.missingAndMatchingFolders = new ObservableCollection<Tuple<string, string, string>>();
            foreach (string relativePath in missingRelativePaths)
            {
                this.missingAndMatchingFolders.Add(new Tuple<string, string, string>(Path.GetFileName(relativePath), relativePath, String.Empty ));
            }
            this.MatchDataGrid.ItemsSource = missingAndMatchingFolders;
        }

        // Label and size the datagrid column headers
        private void MatchDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            this.MatchDataGrid.Columns[2].Header = "Original name";
            this.MatchDataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            this.MatchDataGrid.Columns[3].Header = "Expected old location";
            this.MatchDataGrid.Columns[3].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
            this.MatchDataGrid.Columns[4].Header = "Updated location";
            this.MatchDataGrid.Columns[4].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
        }

        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

        private void ManuallyLocateFolders_Click(object sender, RoutedEventArgs e)
        {
            // Null signals a request to manually locate folders
            this.DialogResult = null;
        }

        private void Ok_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
        }

        private void MatchDataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            System.Diagnostics.Debug.Print("Here");
            try
            {
                Tuple<string, string, string> rowValues = (Tuple<string, string, string>)MatchDataGrid.SelectedItem;
                string missingFolderName = (string)rowValues?.Item1;
                string newLocation = LocateFolder(missingFolderName);
                ObservableCollection<Tuple<string,string,string>> obsCollection = new ObservableCollection<Tuple<string, string, string>>();
                foreach (Tuple<string,string,string> row in this.missingAndMatchingFolders)
                {
                    if (row != rowValues)
                    {
                        obsCollection.Add(row);
                    }
                    else
                    {
                        obsCollection.Add(new Tuple<string, string, string>((string)rowValues.Item1, (string)rowValues.Item2, newLocation));
                    }
                }
                this.missingAndMatchingFolders = obsCollection;
                this.MatchDataGrid.ItemsSource = this.missingAndMatchingFolders;
            }
            catch { }
        }

        // Folder dialog where the user can only select a sub-folder of the root folder path

        private string LocateFolder(string missingFolderName)
        {
            using (CommonOpenFileDialog folderSelectionDialog = new CommonOpenFileDialog()
            {
                Title = "Locate the folder" + missingFolderName + "...",
                DefaultDirectory = this.RootPath,
                IsFolderPicker = true,
                Multiselect = false
            })
            {
                folderSelectionDialog.InitialDirectory = folderSelectionDialog.DefaultDirectory;
                //folderSelectionDialog.FolderChanging += this.FolderSelectionDialog_FolderChanging;
                if (folderSelectionDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {
                    return (folderSelectionDialog.FileName.Length > this.RootPath.Length) ? folderSelectionDialog.FileName.Substring(this.RootPath.Length + 1) : String.Empty;
                    //// Trim the root folder path from the folder name to produce a relative path. Insert it into the textbox for feedback
                    //this.NewFolderName = (folderSelectionDialog.FileName.Length > rootPath.Length) ? folderSelectionDialog.FileName.Substring(rootPath.Length + 1) : String.Empty;
                    //this.TextBoxNewFolderName.Text = this.NewFolderName;
                    //this.OkButton.IsEnabled = !String.IsNullOrWhiteSpace(this.NewFolderName);
                }
                else
                {
                    return String.Empty;
                    //this.NewFolderName = String.Empty;
                    //this.OkButton.IsEnabled = false;
                }
            }
        }

        // Limit the folder selection to only those that are sub-folders of the folder path
        private void FolderSelectionDialog_FolderChanging(object sender, CommonFileDialogFolderChangeEventArgs e)
        {
            // require folders to be loaded be either the same folder as the .tdb and .ddb or subfolders of it
            if (e.Folder.StartsWith(this.RootPath, StringComparison.OrdinalIgnoreCase) == false)
            {
                e.Cancel = true;
            }
        }

        private IList<DataGridCellInfo> selectedCellValues;
        private void MatchDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            this.selectedCellValues = e.AddedCells;
        }

        private void MatchDataGrid_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (this.selectedCellValues == null || this.selectedCellValues.Count == 0 || this.selectedCellValues[0].Item == null)
            {
                return;
            }
            int selectedColumn = this.selectedCellValues[0].Column.DisplayIndex;
            string missingFolderName = this.GetFolderFromCell();
            switch (selectedColumn)
            {
                case 0:
                    // Locate the folder via a dialog
                    string newLocation = LocateFolder(missingFolderName);
                    Tuple<string, string, string> rowValues = (Tuple<string, string, string>)this.selectedCellValues[0].Item ;
                    ObservableCollection<Tuple<string, string, string>> obsCollection = new ObservableCollection<Tuple<string, string, string>>();
                    foreach (Tuple<string, string, string> row in this.missingAndMatchingFolders)
                    {
                        if (row != rowValues)
                        {
                            obsCollection.Add(row);
                        }
                        else
                        {
                            obsCollection.Add(new Tuple<string, string, string>((string)rowValues.Item1, (string)rowValues.Item2, newLocation));
                        }
                    }
                    this.missingAndMatchingFolders = obsCollection;
                    this.MatchDataGrid.ItemsSource = this.missingAndMatchingFolders;
                    break;
                case 1:
                    // View
                    break;
                default:
                    return;
                    break;
            }

            if (this.selectedCellValues.Count == 1)
            {
                System.Diagnostics.Debug.Print("C " + this.GetFolderFromCell());


                System.Diagnostics.Debug.Print("C " + this.selectedCellValues[0].Item.ToString());
                System.Diagnostics.Debug.Print("C " + this.selectedCellValues[0].Column.DisplayIndex.ToString());
            }
            else
            {
                System.Diagnostics.Debug.Print("C " + "Nothing selected");
            }
        }

        private string GetFolderFromCell()
        {
            Tuple <string, string, string> tuple = (Tuple<string, string, string>)this.selectedCellValues[0].Item;
            if (tuple != null)
            {
                return tuple.Item1;
            }
            else
            {
                return String.Empty;
            }
        }
    }
}

