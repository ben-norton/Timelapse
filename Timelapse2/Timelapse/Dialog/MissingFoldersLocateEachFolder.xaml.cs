using Microsoft.WindowsAPICodePack.Dialogs;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Media;

namespace Timelapse.Dialog
{
    /// <summary>
    /// This dialog is one of several that deals with missing folders, i.e. folders that are not found at their relative paths.
    /// It is given a dictionary of old vs. new folder names, and based on that it displays a table of rows, each showing 
    /// - a folder's name, 
    /// - a relative path to an expected old location of that folder,
    /// - a relative path to a possible new location of that folder
    /// The user can then specify whether 
    /// - return true: the new locations are correct, ()
    /// - return null: they would prefer to update the locations manually (e.g., if they aren't correct) 
    /// - return false: cancel all attempts to find the locaton of missing folders.
    /// </summary>
    public partial class MissingFoldersLocateEachFolder : Window
    {
        public Dictionary<string, string> FinalFolderLocations
        {
            get
            {
                Dictionary<string, string> finalFolderLocations = new Dictionary<string, string>();
                foreach (Tuple<string,string,string, bool> tuple in observableCollection)
                {
                    if (tuple.Item4 == true)
                    {
                        finalFolderLocations.Add(tuple.Item2, tuple.Item3);
                    }
                }
                return finalFolderLocations;
            }
        }
        private readonly string RootPath; 
        private ObservableCollection<Tuple<string, string, string, bool>> observableCollection; // A tuple defining the contents of the datagrid
        private IList<DataGridCellInfo> selectedRowTuple; // Will contain the tuple of the row corresponding to the selected cell

        #region Constructor, Loaded and AutoGeneratedColumns
        public MissingFoldersLocateEachFolder(string rootPath, Dictionary<string, string> missingFoldersAndLikelyLocations)
        {
            InitializeComponent();

            if (missingFoldersAndLikelyLocations == null)
            {
                // Nothing to do. Abort
                this.DialogResult = false;
                return;
            }
            this.RootPath = rootPath;
            // Create a collection comprising: folder name, expected location as a relative path, and the possbile new location 
            // and bind it to the data grid
            this.observableCollection = new ObservableCollection<Tuple<string, string, string, bool>>();
            foreach (KeyValuePair<string, string> pair in missingFoldersAndLikelyLocations)
            {
                this.observableCollection.Add(new Tuple<string, string, string, bool>(Path.GetFileName(pair.Key), pair.Key, missingFoldersAndLikelyLocations[pair.Key], true));
            }
            this.DataGrid.ItemsSource = observableCollection;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // Get rid of those ugly empty cell headers atop the Locate/View columns
            this.DataGrid.Columns[0].HeaderStyle = CreateEmptyHeaderStyle();
            this.DataGrid.Columns[1].HeaderStyle = CreateEmptyHeaderStyle();
        }

        // Create the datagrid column headers
        private void MatchDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            this.DataGrid.Columns[2].Header = "Folder name";
            this.DataGrid.Columns[2].Width = new DataGridLength(1, DataGridLengthUnitType.Auto);
            this.DataGrid.Columns[3].Header = "Expected old location";
            this.DataGrid.Columns[3].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
            this.DataGrid.Columns[4].Header = "Possible new location";
            this.DataGrid.Columns[4].Width = new DataGridLength(2, DataGridLengthUnitType.Star);
            this.DataGrid.Columns[5].Header = "Use?";
            this.DataGrid.Columns[5].Width = new DataGridLength(2, DataGridLengthUnitType.Auto);
        }
        #endregion

        #region Button callbacks
        private void Cancel_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = false;
        }

        private void UseNewLocations_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
        }
        #endregion

        #region DataGrid callbacks
        // Remember the tuple of the selected row
        private void MatchDataGrid_SelectedCellsChanged(object sender, SelectedCellsChangedEventArgs e)
        {
            this.selectedRowTuple = e.AddedCells;
        }

        // Determine if the user clicked the View or Locate cell, and take the appropriate action
        private void MatchDataGrid_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (this.selectedRowTuple == null || this.selectedRowTuple.Count == 0 || this.selectedRowTuple[0].Item == null)
            {
                return;
            }
            int selectedColumn = this.selectedRowTuple[0].Column.DisplayIndex;
            string missingFolderName = this.GetFolderNameFromSelection();
            string possibleLocation = GetPossibleLocationFromSelection();
            Tuple<string, string, string, bool> rowValues;
            ObservableCollection<Tuple<string, string, string, bool>> obsCollection;
            switch (selectedColumn)
            {
                case 0:
                    // Locate the folder via a dialog
                    string newLocation = LocateFolderUsingOpenFileDialog(missingFolderName);
                    if (newLocation == null)
                    {
                        return;
                    }
                    rowValues = (Tuple<string, string, string, bool>)this.selectedRowTuple[0].Item;
                    // We need to update the datagrid with the new value. 
                    // To keep it simple,  just rebuild the observable collection and rebind it
                    obsCollection = new ObservableCollection<Tuple<string, string, string, bool>>();
                    foreach (Tuple<string, string, string, bool> row in this.observableCollection)
                    {
                        if (row != rowValues)
                        {
                            obsCollection.Add(row);
                        }
                        else
                        {
                            obsCollection.Add(new Tuple<string, string, string, bool>((string)rowValues.Item1, (string)rowValues.Item2, newLocation, (bool)rowValues.Item4));
                        }
                    }
                    this.observableCollection = obsCollection;
                    this.DataGrid.ItemsSource = this.observableCollection;
                    break;
                case 1:
                    this.ViewFolderUsingFileExplorer(possibleLocation);
                    break;
                case 5:
                    rowValues = (Tuple<string, string, string, bool>)this.selectedRowTuple[0].Item;
                    // We need to update the datagrid with the new value. 
                    // To keep it simple,  just rebuild the observable collection and rebind it
                    obsCollection = new ObservableCollection<Tuple<string, string, string, bool>>();
                    foreach (Tuple<string, string, string, bool> row in this.observableCollection)
                    {
                        if (row != rowValues)
                        {
                            obsCollection.Add(row);
                        }
                        else
                        {
                            obsCollection.Add(new Tuple<string, string, string, bool>((string)rowValues.Item1, (string)rowValues.Item2, (string)rowValues.Item3, !(bool)rowValues.Item4));
                        }
                    }
                    this.observableCollection = obsCollection;
                    this.DataGrid.ItemsSource = this.observableCollection;
                    break;

                default:
                    return;
            }
        }
        #endregion

        #region Helper methods
        private string GetFolderNameFromSelection()
        {
            Tuple<string, string, string, bool> tuple = (Tuple<string, string, string, bool>)this.selectedRowTuple[0].Item;
            if (tuple != null)
            {
                return tuple.Item1;
            }
            else
            {
                return String.Empty;
            }
        }

        private string GetPossibleLocationFromSelection()
        {
            Tuple<string, string, string, bool> tuple = (Tuple<string, string, string, bool>)this.selectedRowTuple[0].Item;
            if (tuple != null)
            {
                return tuple.Item3;
            }
            else
            {
                return String.Empty;
            }
        }
        #endregion

        #region View / Locate a folder using File Explorer and Open File
        // Compose the full path to the relative path, and try to display it in the Windows File Explorer
        // If not path is provided, then the root folder is displayed.
        private void ViewFolderUsingFileExplorer(string relativePath)
        {
            try
            {
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    Arguments = Path.Combine(this.RootPath, relativePath),
                    FileName = "explorer.exe"
                };
                Util.ProcessExecution.TryProcessStart(startInfo);
            }
            catch { }
        }

        // Folder dialog where the user can only select a sub-folder of the root folder path
        private string LocateFolderUsingOpenFileDialog(string missingFolderName)
        {
            using (CommonOpenFileDialog folderSelectionDialog = new CommonOpenFileDialog()
            {
                Title = "Locate the folder" + missingFolderName + "...",
                DefaultDirectory = this.RootPath,
                IsFolderPicker = true,
                Multiselect = false
            })
            {
                folderSelectionDialog.InitialDirectory = folderSelectionDialog.DefaultDirectory;
                folderSelectionDialog.FolderChanging += this.FolderSelectionDialog_FolderChanging;
                if (folderSelectionDialog.ShowDialog() == CommonFileDialogResult.Ok)
                {
                    // Trim the root folder path from the folder name to produce a relative path. 
                    return (folderSelectionDialog.FileName.Length > this.RootPath.Length) ? folderSelectionDialog.FileName.Substring(this.RootPath.Length + 1) : String.Empty;
                }
                else
                {
                    return null;
                }
            }
        }

        // Limit the folder selection to only those that are sub-folders of the folder path
        private void FolderSelectionDialog_FolderChanging(object sender, CommonFileDialogFolderChangeEventArgs e)
        {
            // require folders to be loaded be either the same folder as the .tdb and .ddb or subfolders of it
            if (e.Folder.StartsWith(this.RootPath, StringComparison.OrdinalIgnoreCase) == false)
            {
                e.Cancel = true;
            }
        }
        #endregion

        #region Styles
        // A ColumnHeader style that appears (more or less) empty
        private Style CreateEmptyHeaderStyle()
        {
            Style headerStyle = new Style
            {
                TargetType = typeof(DataGridColumnHeader)//sets target type as DataGrid row
            }; 

            Setter setterBackground = new Setter
            {
                Property = DataGridColumnHeader.BackgroundProperty,
                Value = new SolidColorBrush(Colors.White)
            }; 

            Setter setterBorder = new Setter
            {
                Property = DataGridColumnHeader.BorderThicknessProperty,
                Value = new Thickness(0, 0, 0, 1)
            }; 

            headerStyle.Setters.Add(setterBackground);
            headerStyle.Setters.Add(setterBorder);
            return headerStyle;
        }
        #endregion
    }
}


