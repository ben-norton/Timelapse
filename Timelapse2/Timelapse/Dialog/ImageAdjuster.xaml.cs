using System;
using System.Windows;
using System.Windows.Media;
using Timelapse.EventArguments;

namespace Timelapse.Dialog
{
    ///// <summary>
    ///// Interaction logic for ImageAdjuster.xaml
    /// </summary>
    public partial class ImageAdjuster : Window
    {
        #region Private variables
        // Store the various parameters that indicate how the image should be adjusted
        private int Contrast = 0;
        private int Brightness = 0;
        private bool DetectEdges = false;
        private bool Sharpen = false;
        private bool UseGamma = false;
        private float GammaValue = 1;

        // State information
        private bool AbortUpdate = false;
        #endregion

        #region Consructor, Loading and Closing
        public ImageAdjuster(Window owner)
        {
            InitializeComponent();
            this.Owner = owner;
        }


        // Position the window on the display 
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            int sliderMinMax = 75;
            // Position the window
            this.Left = this.Owner.Left + this.Owner.Width - this.Width - 10;
            this.Top = this.Owner.Top + 3;

            // Configure the sliders and timer
            ContrastSlider.Maximum = sliderMinMax;
            ContrastSlider.Minimum = -sliderMinMax;
            BrightnessSlider.Maximum = sliderMinMax;
            BrightnessSlider.Minimum = -sliderMinMax;
            GammaSlider.Minimum = .0001;
            GammaSlider.Maximum = 1.9999;
            GammaSlider.Value = GammaValue;

            // Register the various control callbacks. 
            CBEdges.Checked += RadioButtons_CheckChanged;
            CBSharpen.Checked += RadioButtons_CheckChanged;
            CBNone.Checked += RadioButtons_CheckChanged;
            ContrastSlider.ValueChanged += ImageSliders_ValueChanged;
            BrightnessSlider.ValueChanged += ImageSliders_ValueChanged;
            GammaSlider.ValueChanged += ImageSliders_ValueChanged;

            // This event signal provides information used to decide how this control should appear e.g., reset, activated, etc.
            Util.GlobalReferences.MainWindow.MarkableCanvas.ImageStateChanged += this.ConfigureWindowState;
        }


        // Reuse the window by changing closing to hiding
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.ResetControlsToNeutralValues();
            this.UpdateImageParametersAndGenerateEvent();
            e.Cancel = true;
            this.Hide();
        }
        #endregion

        #region Receive Event and adjust window appearance state- generated by MarkableCanvas
        private void ConfigureWindowState(object sender, ImageStateEventArgs e)
        {
            // Reset the controls if its a new image
            if (e.IsNewImage)
            {
                this.ResetControlsToNeutralValues();
            }
            // Enable the controls only if a primary (non-differenced) single image is being displayed
            this.EnableControls(e.IsPrimaryImage);
        }

        private void EnableControls(bool enabledState)
        {
            this.IsEnabled = enabledState;
            // Provide a more disabled appearance to radio buttons and checkboxes 
            Brush isEnabledAndNotGamma = enabledState && (CBGamma.IsChecked == false) ? Brushes.Black : Brushes.Gray;
            Brush isEnabled = enabledState  ? Brushes.Black : Brushes.Gray;
  
            // Provide a more disabled appearance to radio buttons, checkboxes and slider labels 
            this.CBNone.Foreground = isEnabledAndNotGamma;
            this.CBEdges.Foreground = isEnabledAndNotGamma;
            this.CBSharpen.Foreground = isEnabledAndNotGamma;
            this.BrightnessLabel.Foreground = isEnabledAndNotGamma;
            this.ContrastLabel.Foreground = isEnabledAndNotGamma;

            this.CBGamma.Foreground = isEnabled; // Gamma always reflects enabled state


        }
        #endregion

        #region Update Image Parameters
        // Update the image processing parameters to those in the checkboxes and sliders
        // Then generate an event to inform the Markable Canvase to update the image according to those paraemeters
        private void UpdateImageParametersAndGenerateEvent()
        {
            if (this.AbortUpdate)
            {
                return;
            }

            // We only update everything and send the event if the final values differ from the current values
            if (this.Contrast != Convert.ToInt32(ContrastSlider.Value) || this.Brightness != Convert.ToInt32(BrightnessSlider.Value) || this.GammaValue != this.GammaSlider.Value
                || this.DetectEdges != CBEdges.IsChecked || this.Sharpen != CBSharpen.IsChecked || this.UseGamma != this.CBGamma.IsChecked)
            {
                this.Contrast = Convert.ToInt32(ContrastSlider.Value);
                this.Brightness = Convert.ToInt32(BrightnessSlider.Value);
                this.DetectEdges = CBEdges.IsChecked == true;
                this.Sharpen = CBSharpen.IsChecked == true;
                this.UseGamma = CBGamma.IsChecked == true;
                this.GammaValue = (float)(this.GammaSlider.Maximum - this.GammaSlider.Value);

                // Generate an event to inform the Markable Canvase to update the image. 
                // Note that the last argument (to invoke an external image viewer) is always false, as that is handeld separately
                this.OnImageProcessingParametersChanged(new ImageAdjusterEventArgs(this.Brightness, this.Contrast, this.Sharpen, this.DetectEdges, this.UseGamma, this.GammaValue, false));
            }
        }

        // Reset the controls  to their neutral values (i.e. to restore the original image)
        private void ResetControlsToNeutralValues()
        {
            // We don't update anything until after we reset the sliders and checkbox, as otherwise it would generate an event for each change
            this.AbortUpdate = true;
            this.BrightnessSlider.Value = 0;
            this.ContrastSlider.Value = 0;
            this.CBNone.IsChecked = true;
            this.CBGamma.IsChecked = false;
            this.GammaSlider.Value = 1;
            this.AbortUpdate = false;

        }
        #endregion

        #region UI Callbacks - image processing parameters altered in the UI
        // Update allimage processing parameters whenever the user changes any of them
        private void RadioButtons_CheckChanged(object sender, RoutedEventArgs e)
        {
            this.UpdateImageParametersAndGenerateEvent();
        }

        // Update all image processing parameters and then update the image based on that
        private void ImageSliders_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            this.UpdateImageParametersAndGenerateEvent();
        }
        private void CBGamma_CheckedChanged(object sender, RoutedEventArgs e)
        {
            bool isNotGamma = CBGamma.IsChecked == false;
            this.GammaSlider.IsEnabled = !isNotGamma;
            this.BrightnessSlider.IsEnabled = isNotGamma;
            this.ContrastSlider.IsEnabled = isNotGamma;
            this.CBNone.IsEnabled = isNotGamma;
            this.CBEdges.IsEnabled = isNotGamma;
            this.CBSharpen.IsEnabled = isNotGamma;

            // Provide a more disabled appearance to radio buttons, checkboxes  and slider labels
            Brush brush = isNotGamma ? Brushes.Black : Brushes.Gray;
            this.CBNone.Foreground = brush;
            this.CBEdges.Foreground = brush;
            this.CBSharpen.Foreground = brush;
            this.BrightnessLabel.Foreground = brush;
            this.ContrastLabel.Foreground = brush;

            this.UpdateImageParametersAndGenerateEvent();
        }

        private void ImageSliders_DragCompleted(object sender, System.Windows.Controls.Primitives.DragCompletedEventArgs e)
        {
            this.UpdateImageParametersAndGenerateEvent();
        }

        private void ButtonReset_Click(object sender, RoutedEventArgs e)
        {
            this.ResetControlsToNeutralValues();
            this.UpdateImageParametersAndGenerateEvent();
        }
        #endregion

        #region Event Generation - Generate an event whenever the parameters change
        // Whenever an image is changed, raise an event (to be consumed by MarkableCanvas)
        public event EventHandler<ImageAdjusterEventArgs> ImageProcessingParametersChanged;

        protected virtual void OnImageProcessingParametersChanged(ImageAdjusterEventArgs e)
        {
            ImageProcessingParametersChanged?.Invoke(this, e);
        }

        #endregion

        private void ButtonImageViewer_Click(object sender, RoutedEventArgs e)
        {
            // Generate an event to inform the Markable Canvas, in this case to invoke the file viewer 
            // The only thing of importance in this call is that the final argument (openExternalViewer) is true. The other values will be ignored. 
            this.OnImageProcessingParametersChanged(new ImageAdjusterEventArgs(this.Brightness, this.Contrast, this.Sharpen, this.DetectEdges, this.UseGamma, this.GammaValue, true));
        }
    }
}
