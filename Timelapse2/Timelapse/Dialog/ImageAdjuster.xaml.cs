using System;
using System.Windows;
using Timelapse.EventArguments;

namespace Timelapse.Dialog
{
    ///// <summary>
    ///// Interaction logic for ImageAdjuster.xaml
    /// </summary>
    public partial class ImageAdjuster : Window
    {
        // Store the various parameters that indicate how the image should be adjusted
        private int Contrast = 0;
        private int Brightness = 0;
        private bool DetectEdges = false;
        private bool Sharpen = false;

        // State information
        private bool AbortUpdate = false;
        // Constructor.

        public ImageAdjuster(Window owner)
        {
            InitializeComponent();
            this.Owner = owner;
        }

        // TODO Position the window on the display 
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            int sliderMinMax = 75;
            // Position the window
            this.Left = this.Owner.Left + this.Owner.Width - this.Width - 10;
            this.Top = this.Owner.Top + 3;

            // Configure the sliders and timer
            ContrastSlider.Maximum = sliderMinMax;
            ContrastSlider.Minimum = -sliderMinMax;
            BrightnessSlider.Maximum = sliderMinMax;
            BrightnessSlider.Minimum = -sliderMinMax;

            // Register the various control callbacks. 
            CBEdges.Checked += RadioButtons_CheckChanged;
            CBSharpen.Checked += RadioButtons_CheckChanged;
            CBNone.Checked += RadioButtons_CheckChanged;
            ContrastSlider.ValueChanged += ImageSliders_ValueChanged;
            BrightnessSlider.ValueChanged += ImageSliders_ValueChanged;

            // If we get this event, it signals whether the control should be reset, inactivated, etc.
            Util.GlobalReferences.MainWindow.MarkableCanvas.ImageStateChanged += this.ConfigureWindowState;
        }

        // Event handler - generated by MarkableCanvas
        private void ConfigureWindowState(object sender, ImageStateEventArgs e)
        {
            if (e.IsNewImage)
            {
                this.ResetControls();  
            }
            this.IsEnabled = e.IsPrimaryImage;
        }


        // Update the image processing parameters to those in the checkboxes and sliders
        // Then generate an event to inform the Markable Canvase to update the image according to those paraemeters
        private void UpdateAndProcessImage()
        {
            if (this.AbortUpdate)
            {
                return;
            }

            // We only update everything and send the event if the final values differ from the current values
            if (this.Contrast != Convert.ToInt32(ContrastSlider.Value) || this.Brightness != Convert.ToInt32(BrightnessSlider.Value) || this.DetectEdges != CBEdges.IsChecked || this.Sharpen != CBSharpen.IsChecked)
            {
                this.Contrast = Convert.ToInt32(ContrastSlider.Value);
                this.Brightness = Convert.ToInt32(BrightnessSlider.Value);
                this.DetectEdges = CBEdges.IsChecked == true;
                this.Sharpen = CBSharpen.IsChecked == true;

                // Generate an event to inform the Markable Canvase to update the image
                this.OnImageProcessingParametersChanged(new ImageAdjusterEventArgs(this.Brightness, this.Contrast, this.Sharpen, this.DetectEdges));
            }
        }

        // Reset the controls  to their defaults, and then update the image processing parameters and image to match the controls
        private void ResetControls()
        {
            // We don't update anything until after we reset the sliders and checkbox, as otherwise it would generate an event for each change
            this.AbortUpdate = true;
            BrightnessSlider.Value = 0;
            ContrastSlider.Value = 0;
            CBNone.IsChecked = true;
            this.AbortUpdate = false;
        }

        #region Callbacks - image processing parameters altered
        // Update allimage processing parameters whenever the user changes any of them
        private void RadioButtons_CheckChanged(object sender, RoutedEventArgs e)
        {
            this.UpdateAndProcessImage();
        }

        // Update all image processing parameters and then update the image based on that
        private void ImageSliders_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            this.UpdateAndProcessImage();
        }

        private void ImageSliders_DragCompleted(object sender, System.Windows.Controls.Primitives.DragCompletedEventArgs e)
        {
            this.UpdateAndProcessImage();
        }

        private void ButtonReset_Click(object sender, RoutedEventArgs e)
        {
            this.ResetControls();
            this.UpdateAndProcessImage();
        }
        #endregion

        #region Event Generation - Generate an event whenever the parameters change
        // Whenever an image is changed, raise an event (to be consumed by MarkableCanvas)
        public event EventHandler<ImageAdjusterEventArgs> ImageProcessingParametersChanged;

        protected virtual void OnImageProcessingParametersChanged(ImageAdjusterEventArgs e)
        {
            ImageProcessingParametersChanged?.Invoke(this, e);
        }

        // Reuse the window by changing closing to hiding
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            this.ResetControls();
            this.UpdateAndProcessImage();
            System.Diagnostics.Debug.Print("Closing");
            e.Cancel = true; 
            this.Hide();
        }
        #endregion

 
    }
}
